import tkinter as tk
from tkinter import ttk, messagebox
from ttkthemes import ThemedTk
import requests
import threading
import os
import sys

# --- Pomocn√° funkce pro PyInstaller (cesta k prost≈ôedk≈Øm) ---
def resource_path(relative_path):
    """ Z√≠sk√° absolutn√≠ cestu k prost≈ôedku, funguje pro v√Ωvoj i pro PyInstaller """
    try:
        # PyInstaller vytv√°≈ô√≠ doƒçasnou slo≈æku a ukl√°d√° cestu do _MEIPASS
        base_path = sys._MEIPASS
    except AttributeError: # Spr√°vnƒõj≈°√≠ je chytat AttributeError pro _MEIPASS
        # Pokud _MEIPASS neexistuje (nap≈ô. p≈ôi bƒõ≈æn√©m spu≈°tƒõn√≠ .py skriptu),
        # pou≈æije se aktu√°ln√≠ pracovn√≠ adres√°≈ô skriptu.
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# --- Glob√°ln√≠ promƒõnn√° pro data o st√°tech ---
countries_data = []

# --- Funkce pro naƒç√≠t√°n√≠ a zpracov√°n√≠ dat ---
def fetch_countries_data():
    """
    Naƒçte data o st√°tech z REST Countries API.
    Tato funkce bƒõ≈æ√≠ v samostatn√©m vl√°knƒõ, aby neblokovala GUI.
    """
    global countries_data
    try:
        # Zkontrolujeme, zda status_label existuje, ne≈æ ho pou≈æijeme
        # (je definov√°n pozdƒõji v GUI ƒç√°sti)
        if 'status_label' in globals() and status_label:
            status_label.config(text="‚è≥ Loading country data...") # UI z≈Øst√°v√° anglicky
        if 'root' in globals() and root: # Zajist√≠me, ≈æe root existuje
            root.update_idletasks() # Okam≈æit√° aktualizace GUI
        
        response = requests.get("https://restcountries.com/v3.1/all?fields=name,population,cca2", timeout=15)
        response.raise_for_status()  # Zkontroluje, zda po≈æadavek probƒõhl √∫spƒõ≈°nƒõ
        data = response.json()

        countries_data = sorted(
            [{"name": country["name"]["common"], "population": country["population"], "code": country["cca2"]} for country in data],
            key=lambda x: x["name"]
        )
        # Ujist√≠me se, ≈æe listbox existuje p≈ôed aktualizac√≠
        if 'countries_listbox' in globals() and countries_listbox:
            update_countries_listbox() # Aktualizuje seznam st√°t≈Ø v GUI
        
        if 'status_label' in globals() and status_label:
            status_label.config(text="‚úÖ Data loaded successfully.") # UI z≈Øst√°v√° anglicky
            
    except requests.exceptions.Timeout:
        messagebox.showerror("Error", "The request timed out while loading data. Please try again later.") # UI z≈Øst√°v√° anglicky
        if 'status_label' in globals() and status_label:
            status_label.config(text="‚ùå Error: Timeout loading data.") # UI z≈Øst√°v√° anglicky
    except requests.exceptions.RequestException as e:
        messagebox.showerror("Error", f"Failed to load data: {e}") # UI z≈Øst√°v√° anglicky
        if 'status_label' in globals() and status_label:
            status_label.config(text="‚ùå Error loading data.") # UI z≈Øst√°v√° anglicky
    except Exception as e: # Zachyt√≠ jak√©koli jin√© neoƒçek√°van√© chyby
        messagebox.showerror("Error", f"An unexpected error occurred: {e}") # UI z≈Øst√°v√° anglicky
        if 'status_label' in globals() and status_label:
            status_label.config(text="‚ùå An unexpected error occurred.") # UI z≈Øst√°v√° anglicky

def update_countries_listbox(filter_text=""):
    """
    Aktualizuje seznam st√°t≈Ø v Listboxu na z√°kladƒõ filtrovan√©ho textu.
    """
    # Tato funkce p≈ôedpokl√°d√°, ≈æe countries_listbox ji≈æ existuje
    countries_listbox.delete(0, tk.END)  # Vyma≈æe aktu√°ln√≠ seznam
    
    if not countries_data and not filter_text: # Pokud data je≈°tƒõ nebyla naƒçtena
        countries_listbox.insert(tk.END, "Loading data, please wait...") # UI z≈Øst√°v√° anglicky
        return

    filtered_countries = [
        country for country in countries_data 
        if filter_text.lower() in country["name"].lower()
    ]
    
    if not filtered_countries:
        countries_listbox.insert(tk.END, "No countries found for the given filter.") # UI z≈Øst√°v√° anglicky
    else:
        for country in filtered_countries:
            countries_listbox.insert(tk.END, country["name"])

def on_country_select(event):
    """
    Zobraz√≠ populaci vybran√©ho st√°tu.
    Spust√≠ se p≈ôi kliknut√≠ na st√°t v Listboxu.
    """
    # Tato funkce p≈ôedpokl√°d√°, ≈æe countries_listbox a population_label ji≈æ existuj√≠
    selected_indices = countries_listbox.curselection()
    if not selected_indices: # Pokud nic nen√≠ vybr√°no
        return

    try:
        selected_country_name = countries_listbox.get(selected_indices[0])
    except tk.TclError:
        population_label.config(text="Population: -") # UI z≈Øst√°v√° anglicky
        return

    if selected_country_name in ["Loading data, please wait...", "No countries found for the given filter."]: # UI z≈Øst√°v√° anglicky
        population_label.config(text="Population: -") # UI z≈Øst√°v√° anglicky
        return

    # Tato funkce p≈ôedpokl√°d√°, ≈æe search_var ji≈æ existuje
    filter_text = search_var.get()
    target_list = [c for c in countries_data if filter_text.lower() in c["name"].lower()] if filter_text else countries_data
    
    country_data = next((country for country in target_list if country["name"] == selected_country_name), None)

    if country_data:
        population_label.config(text=f"Population: {country_data['population']:,}") # UI z≈Øst√°v√° anglicky
    else:
        population_label.config(text="Population: Data not found") # UI z≈Øst√°v√° anglicky

def on_search_change(*args):
    """
    Aktualizuje seznam st√°t≈Ø p≈ôi zmƒõnƒõ textu ve vyhled√°vac√≠m poli.
    """
    # Tato funkce p≈ôedpokl√°d√°, ≈æe search_var, countries_listbox a population_label ji≈æ existuj√≠
    filter_text = search_var.get()
    update_countries_listbox(filter_text)
    if not filter_text: 
        population_label.config(text="Population: -") 
    elif not countries_listbox.size() or countries_listbox.get(0) == "No countries found for the given filter.": # UI z≈Øst√°v√° anglicky
        population_label.config(text="Population: -")

# --- Nastaven√≠ hlavn√≠ho okna ---
root = ThemedTk(theme="arc") 
root.title("World Countries Information") # UI z≈Øst√°v√° anglicky
root.geometry("600x650") 

# --- Nastaven√≠ ikony okna ---
# Ujisti se, ≈æe soubor 'app_icon.ico' je ve stejn√© slo≈æce jako skript,
# nebo pokud pou≈æ√≠v√°≈° PyInstaller s --onefile, ≈æe jsi ho p≈ôidal p≈ôes --add-data
# a ≈æe n√°zev souboru zde odpov√≠d√°.
ikona_soubor_pro_okno = 'app_icon.ico' 
try:
    path_to_icon = resource_path(ikona_soubor_pro_okno)
    root.iconbitmap(path_to_icon)
    print(f"INFO: Pokus o nastaven√≠ ikony okna z '{path_to_icon}' byl proveden.") # Lad√≠c√≠ v√Ωpis
except tk.TclError as e:
    print(f"CHYBA p≈ôi nastavov√°n√≠ ikony okna: {e}")
    print(f"Ujisti se, ≈æe soubor '{ikona_soubor_pro_okno}' (oƒçek√°van√° cesta: '{path_to_icon if 'path_to_icon' in locals() else 'nezn√°m√°'}')")
    print("existuje a je to platn√Ω .ico soubor (nen√≠ po≈°kozen√Ω, m√° spr√°vn√Ω form√°t).")
    print("Pokud pou≈æ√≠v√°≈° PyInstaller (--onefile), ujisti se, ≈æe je ikona p≈ôid√°na p≈ôes --add-data.")
except Exception as e_general:
    print(f"Obecn√° CHYBA p≈ôi nastavov√°n√≠ ikony: {e_general}")

# --- Styly ---
style = ttk.Style()
# M≈Ø≈æe≈° si pohr√°t s fonty glob√°lnƒõ pro ttk widgety, pokud to t√©ma dovol√≠
# style.configure('.', font=('Segoe UI', 10)) 

# --- Definice GUI Prvk≈Ø ---
# Hlavn√≠ r√°meƒçek
main_frame = ttk.Frame(root, padding="15 15 15 15") 
main_frame.pack(fill=tk.BOTH, expand=True)

# R√°meƒçek pro vyhled√°v√°n√≠
search_frame = ttk.Frame(main_frame, padding="0 0 0 10") 
search_frame.pack(fill=tk.X)

ttk.Label(search_frame, text="üîé Search Country:", font=('Segoe UI', 11)).pack(side=tk.LEFT, padx=(0, 8)) # UI z≈Øst√°v√° anglicky
search_var = tk.StringVar() # Promƒõnn√° pro text z vyhled√°vac√≠ho pole
search_var.trace_add("write", on_search_change) 
search_entry = ttk.Entry(search_frame, textvariable=search_var, font=('Segoe UI', 11), width=40)
search_entry.pack(side=tk.LEFT, expand=True, fill=tk.X)
search_entry.focus() 

# R√°meƒçek pro seznam st√°t≈Ø
list_frame = ttk.Frame(main_frame, padding="0 10 0 10")
list_frame.pack(fill=tk.BOTH, expand=True)

scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL)
listbox_font = ('Segoe UI', 12)
countries_listbox = tk.Listbox(list_frame, yscrollcommand=scrollbar.set, height=15,
                               selectmode=tk.SINGLE, font=listbox_font,
                               relief=tk.FLAT, borderwidth=1,
                               highlightthickness=1, highlightbackground="#cccccc") 

# Pokus o nastaven√≠ barev Listboxu, aby ladily s t√©matem
try:
    bg_color = style.lookup('TFrame', 'background')
    fg_color = style.lookup('TLabel', 'foreground')
    select_bg = style.lookup('TCombobox', 'selectbackground') 
    select_fg = style.lookup('TCombobox', 'selectforeground')
    countries_listbox.configure(bg=bg_color, fg=fg_color,
                                selectbackground=select_bg, selectforeground=select_fg)
except tk.TclError:
    pass # Pou≈æij√≠ se v√Ωchoz√≠ barvy, pokud t√©ma nelze p≈ôeƒç√≠st

scrollbar.config(command=countries_listbox.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
countries_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
countries_listbox.bind("<<ListboxSelect>>", on_country_select) # P≈ôi v√Ωbƒõru polo≈æky zavol√° on_country_select

# Popisek pro zobrazen√≠ populace
population_label = ttk.Label(main_frame, text="Population: -", font=("Segoe UI", 16, "bold"), anchor=tk.CENTER, padding="10 15 10 10") # UI z≈Øst√°v√° anglicky
population_label.pack(fill=tk.X)

# Stavov√Ω ≈ô√°dek
status_frame = ttk.Frame(root, relief=tk.SUNKEN, padding=0) 
status_frame.pack(side=tk.BOTTOM, fill=tk.X)
status_label = ttk.Label(status_frame, text="Ready.", padding="5 2 5 2", anchor=tk.W, font=('Segoe UI', 9)) # UI z≈Øst√°v√° anglicky
status_label.pack(fill=tk.X)

# --- Spu≈°tƒõn√≠ naƒç√≠t√°n√≠ dat na pozad√≠ ---
# Vl√°kno se spust√≠ a≈æ pot√©, co jsou v≈°echny GUI prvky (vƒçetnƒõ status_label) definov√°ny
threading.Thread(target=fetch_countries_data, daemon=True).start()

# --- Spu≈°tƒõn√≠ hlavn√≠ smyƒçky aplikace (pouze jednou na konci) ---
root.mainloop()