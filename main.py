import tkinter as tk
from tkinter import ttk, messagebox
from ttkthemes import ThemedTk # Pro tematick√© GUI
import requests # Pro HTTP po≈æadavky (naƒç√≠t√°n√≠ dat z API)
import threading # Pro naƒç√≠t√°n√≠ dat na pozad√≠, aby aplikace nezamrzala

# Glob√°ln√≠ promƒõnn√° pro ukl√°d√°n√≠ dat o st√°tech
countries_data = []

def fetch_countries_data():
    """
    Naƒçte data o st√°tech z REST Countries API.
    Tato funkce bƒõ≈æ√≠ v samostatn√©m vl√°knƒõ, aby neblokovala GUI.
    """
    global countries_data
    try:
        status_label.config(text="‚è≥ Loading country data...") # UI z≈Øst√°v√° anglicky
        root.update_idletasks() # Okam≈æit√° aktualizace GUI
        # Naƒç√≠t√°n√≠ bƒõ≈æn√©ho n√°zvu, populace a cca2 k√≥du pro v≈°echny st√°ty
        response = requests.get("https://restcountries.com/v3.1/all?fields=name,population,cca2", timeout=15)
        response.raise_for_status()  # Zkontroluje, zda po≈æadavek probƒõhl √∫spƒõ≈°nƒõ
        data = response.json()

        # Se≈ôad√≠ st√°ty abecednƒõ podle jejich bƒõ≈æn√©ho n√°zvu
        countries_data = sorted(
            [{"name": country["name"]["common"], "population": country["population"], "code": country["cca2"]} for country in data],
            key=lambda x: x["name"]
        )
        update_countries_listbox() # Aktualizuje seznam st√°t≈Ø v GUI
        status_label.config(text="‚úÖ Data loaded successfully.") # UI z≈Øst√°v√° anglicky
    except requests.exceptions.Timeout:
        messagebox.showerror("Error", "The request timed out while loading data. Please try again later.") # UI z≈Øst√°v√° anglicky
        status_label.config(text="‚ùå Error: Timeout loading data.") # UI z≈Øst√°v√° anglicky
    except requests.exceptions.RequestException as e:
        messagebox.showerror("Error", f"Failed to load data: {e}") # UI z≈Øst√°v√° anglicky
        status_label.config(text="‚ùå Error loading data.") # UI z≈Øst√°v√° anglicky
    except Exception as e: # Zachyt√≠ jak√©koli jin√© neoƒçek√°van√© chyby
        messagebox.showerror("Error", f"An unexpected error occurred: {e}") # UI z≈Øst√°v√° anglicky
        status_label.config(text="‚ùå An unexpected error occurred.") # UI z≈Øst√°v√° anglicky

def update_countries_listbox(filter_text=""):
    """
    Aktualizuje seznam st√°t≈Ø v Listboxu na z√°kladƒõ filtrovan√©ho textu.
    """
    countries_listbox.delete(0, tk.END)  # Vyma≈æe aktu√°ln√≠ seznam
    
    if not countries_data and not filter_text: # Pokud data je≈°tƒõ nebyla naƒçtena
        countries_listbox.insert(tk.END, "Loading data, please wait...") # UI z≈Øst√°v√° anglicky
        return

    # Filtruje st√°ty na z√°kladƒõ vyhled√°vac√≠ho textu (nerozli≈°uje mal√° a velk√° p√≠smena)
    filtered_countries = [
        country for country in countries_data 
        if filter_text.lower() in country["name"].lower()
    ]
    
    if not filtered_countries:
        countries_listbox.insert(tk.END, "No countries found for the given filter.") # UI z≈Øst√°v√° anglicky
    else:
        for country in filtered_countries:
            countries_listbox.insert(tk.END, country["name"])

def on_country_select(event):
    """
    Zobraz√≠ populaci vybran√©ho st√°tu.
    Spust√≠ se p≈ôi kliknut√≠ na st√°t v Listboxu.
    """
    selected_indices = countries_listbox.curselection()
    if not selected_indices: # Pokud nic nen√≠ vybr√°no
        return

    # Zajist√≠, aby get() nevyvolal chybu, pokud je listbox pr√°zdn√Ω nebo obsahuje zpr√°vu
    try:
        selected_country_name = countries_listbox.get(selected_indices[0])
    except tk.TclError:
        population_label.config(text="Population: -") # UI z≈Øst√°v√° anglicky
        return

    # Pokud listbox obsahuje zpr√°vu (nap≈ô. "Loading data..."), nic nedƒõlej
    if selected_country_name in ["Loading data, please wait...", "No countries found for the given filter."]: # UI z≈Øst√°v√° anglicky
        population_label.config(text="Population: -") # UI z≈Øst√°v√° anglicky
        return

    # Najde data pro vybran√Ω st√°t
    # Zohledn√≠ aktu√°lnƒõ filtrovan√Ω seznam, pokud je aktivn√≠ vyhled√°v√°n√≠
    filter_text = search_var.get()
    target_list = [c for c in countries_data if filter_text.lower() in c["name"].lower()] if filter_text else countries_data
    
    country_data = next((country for country in target_list if country["name"] == selected_country_name), None)

    if country_data:
        # Form√°tuje ƒç√≠slo populace s oddƒõlovaƒçi tis√≠c≈Ø
        population_label.config(text=f"Population: {country_data['population']:,}") # UI z≈Øst√°v√° anglicky
    else:
        # Toto by se ide√°lnƒõ nemƒõlo st√°t, pokud je seznam synchronizovan√Ω
        population_label.config(text="Population: Data not found") # UI z≈Øst√°v√° anglicky


def on_search_change(*args):
    """
    Aktualizuje seznam st√°t≈Ø p≈ôi zmƒõnƒõ textu ve vyhled√°vac√≠m poli.
    """
    filter_text = search_var.get()
    update_countries_listbox(filter_text)
    if not filter_text: # Pokud je vyhled√°vac√≠ pole pr√°zdn√©, zobraz√≠ se v≈°echny st√°ty
        population_label.config(text="Population: -") # Resetuje popisek populace
    elif not countries_listbox.size() or countries_listbox.get(0) == "No countries found for the given filter.": # UI z≈Øst√°v√° anglicky
        population_label.config(text="Population: -") # Resetuje, pokud nejsou ≈æ√°dn√© v√Ωsledky
    # Jinak ponech√° populaci, pokud je nƒõco vybr√°no a st√°le viditeln√©

# --- Nastaven√≠ hlavn√≠ho okna ---
# root = tk.Tk() # P≈Øvodn√≠
root = ThemedTk(theme="arc") # Pou≈æit√≠ ttkthemes, zkus nap≈ô. "plastik", "arc", "ubuntu", "smog"
root.title("World Countries Information") # UI z≈Øst√°v√° anglicky
root.geometry("600x650") # Trochu vƒõt≈°√≠ okno

# --- Styly ---
style = ttk.Style()
# M≈Ø≈æe≈° si pohr√°t s fonty glob√°lnƒõ pro ttk widgety, pokud to t√©ma dovol√≠
# style.configure('.', font=('Segoe UI', 10)) # 'Segoe UI' je pƒõkn√Ω font ve Windows
# style.configure('TLabel', font=('Segoe UI', 10))
# style.configure('TButton', font=('Segoe UI', 10))
# style.configure('TEntry', font=('Segoe UI', 10))

# --- GUI Prvky ---
main_frame = ttk.Frame(root, padding="15 15 15 15") # Hlavn√≠ r√°meƒçek s odsazen√≠m
main_frame.pack(fill=tk.BOTH, expand=True)

# R√°meƒçek pro vyhled√°v√°n√≠
search_frame = ttk.Frame(main_frame, padding="0 0 0 10") # (left, top, right, bottom)
search_frame.pack(fill=tk.X)

ttk.Label(search_frame, text="üîé Search Country:", font=('Segoe UI', 11)).pack(side=tk.LEFT, padx=(0, 8)) # UI z≈Øst√°v√° anglicky
search_var = tk.StringVar()
search_var.trace_add("write", on_search_change) # Zavol√° on_search_change p≈ôi ka≈æd√© zmƒõnƒõ
search_entry = ttk.Entry(search_frame, textvariable=search_var, font=('Segoe UI', 11), width=40)
search_entry.pack(side=tk.LEFT, expand=True, fill=tk.X)
search_entry.focus() # Nastav√≠ kurzor do vyhled√°vac√≠ho pole p≈ôi spu≈°tƒõn√≠

# R√°meƒçek pro seznam st√°t≈Ø a posuvn√≠k
list_frame = ttk.Frame(main_frame, padding="0 10 0 10")
list_frame.pack(fill=tk.BOTH, expand=True)

scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL)
# St√°le pou≈æ√≠v√°me tk.Listbox, proto≈æe ttk.Treeview je slo≈æitƒõj≈°√≠ pro jednoduch√Ω seznam
# ale nastav√≠me mu fonty a barvy, aby l√©pe ladily s t√©matem
listbox_font = ('Segoe UI', 12)
countries_listbox = tk.Listbox(list_frame, yscrollcommand=scrollbar.set, height=15,
                               selectmode=tk.SINGLE, font=listbox_font,
                               relief=tk.FLAT, borderwidth=1,
                               highlightthickness=1, highlightbackground="#cccccc") # Jemn√Ω okraj

# Pokus o nastaven√≠ barev Listboxu tak, aby ladily s ttk t√©matem
# Tyto hodnoty bude mo≈æn√° pot≈ôeba upravit podle zvolen√©ho t√©matu
try:
    bg_color = style.lookup('TFrame', 'background')
    fg_color = style.lookup('TLabel', 'foreground')
    # Pou≈æit√≠ barev v√Ωbƒõru z TCombobox jako n√°hrady pro v√Ωbƒõr v Listboxu
    select_bg = style.lookup('TCombobox', 'selectbackground') 
    select_fg = style.lookup('TCombobox', 'selectforeground')

    countries_listbox.configure(bg=bg_color, fg=fg_color,
                                selectbackground=select_bg, selectforeground=select_fg)
except tk.TclError:
    # Pokud se nepoda≈ô√≠ z√≠skat barvy z t√©matu (nap≈ô. pro star≈°√≠ t√©mata), pou≈æij√≠ se v√Ωchoz√≠
    pass

scrollbar.config(command=countries_listbox.yview)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
countries_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

countries_listbox.bind("<<ListboxSelect>>", on_country_select) # Zavol√° on_country_select p≈ôi v√Ωbƒõru polo≈æky

# Popisek pro zobrazen√≠ populace
population_label = ttk.Label(main_frame, text="Population: -", font=("Segoe UI", 16, "bold"), anchor=tk.CENTER, padding="10 15 10 10") # UI z≈Øst√°v√° anglicky
population_label.pack(fill=tk.X)

# Stavov√Ω ≈ô√°dek
status_frame = ttk.Frame(root, relief=tk.SUNKEN, padding=0) # R√°meƒçek pro stavov√Ω ≈ô√°dek
status_frame.pack(side=tk.BOTTOM, fill=tk.X)
status_label = ttk.Label(status_frame, text="Ready.", padding="5 2 5 2", anchor=tk.W, font=('Segoe UI', 9)) # UI z≈Øst√°v√° anglicky, padding (left, top, right, bottom)
status_label.pack(fill=tk.X)

# --- Spu≈°tƒõn√≠ naƒç√≠t√°n√≠ dat na pozad√≠ ---
# Pou≈æit√≠ vl√°kna, aby GUI nezamrzlo bƒõhem naƒç√≠t√°n√≠ dat
threading.Thread(target=fetch_countries_data, daemon=True).start()

# --- Spu≈°tƒõn√≠ hlavn√≠ smyƒçky aplikace ---
root.mainloop()